import math
# Задачи на кортежи
# 1. Дан кортеж. Вывести все его совершенные числа. (6, 2, 7, 8)
# 6 = 1 + 2 + 3
# 28 = 1 + 2 + 4 + 7 + 14
# data = (6, 2, 7, 8, 28, 128, 33, 496)
# for el in data:
#     buf = el - 1
#     divisors_sum = 0
#     while buf >= 1:
#         if el % buf == 0:
#             divisors_sum+=buf
#         buf -= 1
#     if divisors_sum == el:
#         print(el)

# 2. Дан кортеж.Написать программу, определяющую сколько раз менялся знак в кортеже.(5, 2, -2, 7, -8, -9, 1)
# 4 раза
# tup = (5, 2, -2, 7, -8, 9, -1)
# count = 0
# for ind in range(len(tup) - 1):
#     if tup[ind] < 0 and tup[ind+1] > 0 or tup[ind] > 0 and tup[ind+1] < 0:
#         count +=1
# print(count)

# Задачи на списки
# 3. Задано два списка.Найти наименьшие среди элементов первого списка, которые
# не входят во второй список или вывести что такого элемента нет.
# [4, 1, 6, 9][8, 1, 2, 4, 9, 5, 7, 6] -> нет такого элемента
# lst_1 = [1, 4, 6, 9]
# lst_2 = [8, 1, 2, 4, 9, 5, 7, 6]
# lst_1_sorted = sorted(lst_1)
# presence_sign = 0
# for ind in range(math.ceil(len(lst_1_sorted)/2)):
#     if lst_1_sorted[ind] not in lst_2:
#         print(lst_1_sorted[ind])
#     else:
#         presence_sign += 1
# if math.ceil(len(lst_1_sorted)/2) == presence_sign:
#     print("No such element")
# 4. Дан список положительных целых чисел.Вставить после каждого чётного числа его перевёртыш.
# Например для чисел:
# 18 -> 81,
# 42 -> 24,
# 8 ->  8,
# 122 -> 221
# lst = [182, 342, 543, 896, 558, 346, 365, 366]
# new_lst =[]
# for el in lst:
#     new_lst.append(el)
#     if el % 2 == 0:
#         new_lst.append(int(str(el)[::-1]))
# print(new_lst)
# 5. Дан список.Вычислить сколько раз в нем встречается каждый элемент, не используя сортировки.[5, 2, 4, 5, 1, 2]
# 1 – > 1
# 2 – > 2
# 4 – > 1
# 5    – > 2
# lst = [1, 4, 5, 8, 2, 1, 4, 5, 5, 5, 2]
# counter = {}
# for el in lst:
#     if el in counter:
#         counter[el] += 1
#     else:
#         counter[el] = 1
# for key in counter:
#     print(key, "- >", counter[key])

# 6. Дан список, преобразуйте его, вставив 0 между числами.
# [7 4 1]
# Sample Output:
# 7 0 4 0 1
# numbers = [7, 4, 1, 3, 33, 333]
# str_numbers = [str(n) for n in numbers]
# result = ' 0 '.join(str_numbers)
# print(result)

# Задачи на множества
# 7. Во входной строке записана последовательность чисел через пробел.Для каждого числа выведите слово
# YES(в отдельной строке), если это число ранее встречалось в последовательности или
# NO, если не встречалось.
# some_str = input("Enter some numbers separated by spaces: ")
# print(some_str)
# some_lst = some_str.split()
#
# for ind in range(len(some_lst)):
#     if some_lst[ind] in some_lst[:ind]:
#         print(some_lst[ind], "YES")
#     else:
#         print(some_lst[ind], "NO")

# 8.Август и Беатриса играют в игру. Август загадал натуральное число от 1 до n. Беатриса пытается
# угадать это число, для этого она называет некоторые множества натуральных чисел. Август
# отвечает Беатрисе YES, если среди названных ей чисел есть задуманное или NO в противном случае.
# После нескольких заданных вопросов Беатриса запуталась в том, какие вопросы она задавала и
# какие ответы получила и просит вас помочь ей определить, какие числа мог задумать Август.В
# первой строке задано n - максимальное число, которое мог загадать Август. Далее каждая строка
# содержит вопрос Беатрисы (множество чисел, разделенных пробелом) и ответ Августа на этот вопрос.
# Вы должны вывести через пробел, в порядке возрастания, все числа, которые мог задумать Август.
# n = int(input("What is the maximum number I can guess?: "))
# number_range = set(range(1, n + 1))
# likely_numbers = number_range
# print(likely_numbers)
#
# while input("Guess more? ") != "no":
#     guess = input("Enter your guesses: ")
#     guess = set(map(int, guess.split()))
#     print(guess)
#     yes_no = input("Is there a guessed number? ")
#     if yes_no == 'YES':
#         likely_numbers &= guess
#     else:
#         likely_numbers &= number_range - guess
#
# print(sorted(likely_numbers))

# Задачи на словари
# 9. Вам дан словарь, состоящий из пар слов. Каждое слово является синонимом к парному ему слову.
# Все слова в словаре различны. Для слова из словаря, записанного в последней строке, определите
# его синоним.
# synonym_dict = {"silence": "quiet", "calmness": "serenity", "joy": "happiness", "bliss": "ecstasy",
#                 "light": "illumination", "compassion": "empathy", "space": "area",
#                 "infinity": "eternity", "being": "existence", "grace": "charm"
# }
#
# dict_keys = synonym_dict.keys()
# dict_values = synonym_dict.values()
# print(list(dict_keys)[-1], " - ", list(dict_values)[-1])

# 10. Коля устал запоминать телефонные номера и заказал у Вас программу, которая заменила бы ему
# телефонную книгу. Коля может послать программе два вида запросов: строку, содержащую
# имя контакта и его номер, разделенные пробелом, или просто имя контакта. В первом случае
# программа должна добавить в книгу новый номер, во втором – вывести номер контакта. Ввод
# происходит до символа точки. Если введенное имя уже содержится в списке контактов, необходимо
# перезаписать номер.
# Sample Input:
# Ben 89001234050
# Alice
# 210 - 220
# Alice
# Alice
# 404 - 502
# Ben
# Nick
# Alice
# Robert
# 51234047129
# .
# Sample Output:
# 210 - 220
# 89001234050
# +4(908)273-22-42
# 404 - 502
# phone_book = {"Nick": "+4(908)273-22-42"}
# while True:
#     query = input()
#     if query == '.':
#         break
#     query_list = query.split()
#     name = query_list[0]
#
#     if len(query_list) == 2:
#         number = query_list[1]
#         phone_book[name] = number
#     elif name in phone_book:
#         print(phone_book[name])
# print(phone_book)
# Дополнительные задачи на использование всех коллекций

# 1. * Напишите программу, которая выводит часть последовательности 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5...
# (число повторяется столько раз, чему равно).На вход программе передаётся неотрицательное целое число
# n — столько элементов последовательности должна отобразить программа.На выходе ожидается
# последовательность чисел, записанных через пробел в одну строку.
# Sample Input:
# 7
# Sample Output:
# 1 2 2 3 3 3 4
n = int(input("How many elements to display?: "))
print(type(n))


# 2. * Дан список. Перезаписать его так, чтобы сначала были все положительные числа, а затем
# все отрицательные и нули, сохраняя порядок их следования.
# [5, 2, 0, -2, -7, 1, 8, 0, -1] -> [5, 2, 1, 8, -2, -7, -1, 0, 0]
#
# 3. * Дан список. Продублировать все неповторяющиеся элементы.
# [5, 2, 7, 3, 8, 2, 4, 1, 6, 5] -> [5, 2, 7, 7, 3, 3, 8, 8, 2, 4, 4, 1, 1, 6, 6, 5]
#
# 4. * Римские
# цифры
# представлены
# семью
# различными
# символами: I, V, X, L, C, D
# и
# M
#
# Символ
# Значение
# I
# 1
# V
# 5
# X
# 10
# L
# 50
# C
# 100
# D
# 500
# M
# 1000
# Например, 2
# пишется
# как
# II
# римскими
# цифрами, просто
# две
# сложенные
# вместе.
# 12
# пишется
# как
# XII, что
# просто
# X + II.Число
# 27
# записывается
# как
# XXVII, то
# есть
# XX + V + II.Римские
# цифры
# обычно
# пишутся
# слева
# направо
# от
# большего
# к
# меньшему.Однако
# цифра «четыре» — не
# IIII.Вместо
# этого
# цифра
# четыре
# записывается
# как
# IV.Так
# как
# единица
# предшествует
# пятерке, мы
# вычитаем
# ее
# и
# получаем
# четыре.Тот
# же
# принцип
# применим
# к
# числу
# девять, которое
# записывается
# как
# IX.Есть
# шесть
# случаев, когда
# используется
# вычитание:
#
# I
# можно
# поставить
# перед
# V(5)
# и
# X(10), чтобы
# получилось
# 4
# и
# 9.
# X
# можно
# поставить
# перед
# L(50)
# и
# C(100), чтобы
# получилось
# 40
# и
# 90.
# C
# можно
# поставить
# перед
# D(500)
# и
# M(1000), чтобы
# получить
# 400
# и
# 900.
# Дана
# римская
# цифра, преобразовать
# ее
# в
# целое
# число.
# Sample
# Input
# 1:
# III
# Sample
# Output
# 1:
# 3
# Sample
# Input
# 2:
# LVIII
# Sample
# Output
# 2:
# 58
# Sample
# Input
# 2:
# MCMXCIV
# Sample
# Output
# 2:
# 1994